"""協調フィルタリングモジュール collab と推奨システム D-Recommend"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/17recommender.ipynb.

# %% auto 0
__all__ = ['folder', 'colab_learn', 'colab_predict', 'show_item_map', 'show_user_map', 'show_recommend']

# %% ../nbs/17recommender.ipynb 3
from fastai import *
from fastai.tabular import *
from fastai.tabular.all import *
from fastai.collab import *
from faker import Faker
import plotly.graph_objs as go
import plotly.express as px
import plotly
folder ="./data/collab/"

# %% ../nbs/17recommender.ipynb 24
def colab_learn(ratings_df):
    ratings = ratings_df[ ["user","movie","rating"] ]
    dls = CollabDataLoaders.from_df(ratings, valid_pct=0.1, bs=64)
    learn = collab_learner(dls, n_factors=50, y_range=(0, 5.5), loss_func=MSELossFlat())
    learn.fit_one_cycle(5, 5e-3, wd=0.1)
    return learn

# %% ../nbs/17recommender.ipynb 31
def colab_predict(learn, movies_df, user_id):
    n = len(movies_df)
    df = pd.DataFrame({"user":[user_id for i in range(n)], "movie": movies_df.movie, "rating": [0 for i in range(n)]}) #prepare data frame
    dl = learn.dls.test_dl(df) # make a <test> data loader 
    y_pred = learn.get_preds(dl = dl)  #predict 
    recommend_df = pd.DataFrame({"movie":movies_df.movie, "recommend movie": movies_df.title, "rating": y_pred[0]} ).sort_values(by="rating",ascending=False)
    return recommend_df

# %% ../nbs/17recommender.ipynb 39
def show_item_map(learn, movies_df):
    movie_w = learn.model.weight(movies_df.movie, is_item=True) #weight matrix
    movie_pca = movie_w.pca(3) #PCA
    fac0,fac1,fac2 = movie_pca.t() #top 3 主成分
    movies_df["PCA1"] = fac0
    movies_df["PCA2"] = fac1
    movies_df["PCA3"] = fac2
    fig = px.scatter(movies_df, x="PCA1", y="PCA2", hover_name="title", text="title", size="average rating", size_max=10, opacity=0.8, color="average rating")
    return fig, movies_df 

# %% ../nbs/17recommender.ipynb 44
def show_user_map(learn, users_df):
    user_w = learn.model.weight(users_df.id, is_item=False)
    user_pca = user_w.pca(3)
    fac0,fac1,fac2 = user_pca.t()
    users_df["PCA1"] = fac0
    users_df["PCA2"] = fac1
    users_df["PCA3"] = fac2
    fig = px.scatter(users_df, x="PCA1", y="PCA2",  text="name", size_max=1, opacity=0.8, color="average rating")
    return fig, users_df 

# %% ../nbs/17recommender.ipynb 49
def show_recommend(learn, movies_df, recommend_df, best=100):
    movie_w = learn.model.weight(movies_df.movie, is_item=True) #weight matrix
    movie_pca = movie_w.pca(3) #PCA
    fac0,fac1,fac2 = movie_pca.t() #top 3 主成分
    movies_df["PCA1"] = fac0
    movies_df["PCA2"] = fac1
    movies_df["PCA3"] = fac2
    recommend_new = pd.merge(recommend_df, movies_df, on="movie")
    fig = px.scatter(recommend_new[:best], x="PCA1", y="PCA2", hover_name="title", text="title", size= "rating", opacity=0.8, color="rating")
    return fig
