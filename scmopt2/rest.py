# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/17rest.ipynb.

# %% auto 0
__all__ = ['folder', 're_dic0', 're_dic1', 're_dic', 'PickledBaseModel', 'Instance', 'Solution', 'Customer', 'CustomerList',
           'Time', 'TimeList', 'MelosGf', 'read_xl', 'make_obj_list', 'valid_test', 'test_all', 'solve_weiszfeld',
           'InstancePool', 'SolutionPool', 'Product', 'ProductList', 'TotalDemand', 'Demand', 'DemandList', 'Promotion',
           'PromotionList', 'Dc', 'DcList', 'Plant', 'PlantList', 'PlantProduct', 'PlantProductList', 'Trans', 'Melos',
           'solve_melos', 'OptSeq', 'Activity', 'ActivityList', 'Mode', 'ModeList', 'Resource', 'ResourceList',
           'ActivityMode', 'ActivityModeList', 'ModeResource', 'ModeResourceList', 'Temporary', 'TemporaryList',
           'Nonrenewable', 'NonrenewableList', 'LeftHandSide', 'LeftHandSideList', 'State', 'StateList', 'solve_optseq',
           'Scop', 'solve_scop', 'Node', 'NodeList', 'Break', 'BreakList', 'Vehicle', 'VehicleList', 'Job', 'JobList',
           'ShipmentStep', 'Shipment', 'ShipmentList', 'Metro', 'solve_metro', 'Stage', 'StageList', 'Bom', 'BomList',
           'Messa', 'solve_messa', 'solve_optinv', 'Sendo', 'solve_sendo', 'Period', 'PeriodList', 'ShiftBreak',
           'ShiftBreakList', 'Day', 'DayList', 'ShiftJob', 'ShiftJobList', 'Staff', 'StaffList', 'Requirement',
           'RequirementList', 'Parameter', 'OptShift', 'solve_optshift', 'Production', 'ProductionList', 'PlantDemand',
           'PlantDemandList', 'LotResource', 'LotResourceList']

# %% ../nbs/17rest.ipynb 3
import sys
sys.path.append('..')
from fastapi import FastAPI
from fastapi.encoders import jsonable_encoder
from fastapi.responses import JSONResponse
from typing import List, Optional, Union, Tuple, Dict, Any
from pydantic import BaseModel, Field, ValidationError, validator, confloat, conint, constr, Json
from pydantic.tools import parse_obj_as

import time 
import re 
import pandas as pd
import requests
from collections import OrderedDict, defaultdict
import networkx as nx
import subprocess
import platform
import json
import numpy as np
import plotly
import datetime 
import ast  #文字列からオブジェクトを起こすモジュール
import pickle

from openpyxl import Workbook, load_workbook
from openpyxl.worksheet.table import Table, TableStyleInfo
from openpyxl.chart import ScatterChart, Reference, Series
from openpyxl.worksheet.datavalidation import DataValidation
from openpyxl.formatting.rule import ColorScaleRule, CellIsRule, FormulaRule
from openpyxl.styles import Color, PatternFill, Font, Border, Alignment
from openpyxl.styles.borders import Border, Side
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.comments import Comment

folder = "../data/"

import sys
sys.path.append('..')

import scmopt.abc as abc
import scmopt.lnd as lnd
import scmopt.optseq as optseq
import scmopt.scop as scop
import scmopt.metro as metro
import scmopt.optinv as optinv
import scmopt.snd as snd
import scmopt.shift as shift
import scmopt.lotsizing as lot

# %% ../nbs/17rest.ipynb 25
class PickledBaseModel(BaseModel):
    """
    Pickleを付加したベースモデル
    """
    def to_pickle(self, file_name = None):
        if file_name is None: file_name = str(self.name)
        with open(f"{file_name}.pkl","wb") as f:
            pickle.dump(self, f)
            
    def from_pickle(self, file_name = None):
        if file_name is None: file_name = str(self.name)
        with open(f"{file_name}.pkl","rb") as f:
            self = pickle.load(f)
            
#Instanceベースクラスを作り，そこから派生させるか？
#Instance は特徴や， 特徴を利用したInstance同士の距離などの追加要素をもつクラス
class Instance(PickledBaseModel):
    name: Optional[str] = Field(description="名称", default = "no_name") 
    feature: Optional[Any] 
    

class Solution(PickledBaseModel):
    name: Optional[str] = Field(description="名称", default = "no_name")
    data: Optional[Any]
    cpu: Optional[ Union[int, float]] 
    objval:  Optional[ Union[int, float]] 
        
class Customer(BaseModel):
    name: str = Field(description="名称")
    lat: float = Field(description="緯度")
    lon: float = Field(description="経度")
    weight: Optional[float] = Field(description="重み")
    
    class Config:
        schema_extra = {
            "example": {
                "name": "響本店",
                "lat": 43.06417,
                "lon": 141.34694,
                "weight": 100.0
            }
        }
        
class CustomerList(BaseModel):
    field_list: List[Customer]= Field(description="顧客リスト", default=[])
        
class Time(BaseModel):
    from_node: int 
    from_name: Optional[str] 
    to_node: int
    to_name: Optional[str]
    time: int 
    distance: Optional[int]
        
    class Config:
        schema_extra = {
            "example": {
                "from_node": 0,
                "from_name": "札幌市",
                "to_node": 1,
                "to_name": "青森市",
                "time": 23888,
                "distance": 427015
            }
        }
        
class TimeList(BaseModel):
    field_list: List[Time]= Field(description="時間リスト", default=[])
        

class MelosGf(Instance):
    """
    Melos Green Field モデル
    """
    num_facilities: int = Field(1, description="施設数", ge=1)
    epsilon: float = Field(0.00001, description="誤差", gt=0.)
    max_iter: int = Field(10, description="最大反復数", ge=1)
    seed: int = Field(1, description="乱数の種")
    customers:  List[Customer]= Field(description="顧客リスト", default=[])
    times: List[Time]= Field(description="時間リスト", default=[])

# %% ../nbs/17rest.ipynb 32
def read_xl(file_name):
    wb = load_workbook(file_name)
    sheets = []
    for name in wb.sheetnames:
        sheets.append( wb[name] )
    dfs =[]
    for ws in sheets:
        data = ws.values
        cols = next(data)[:]
        data = list(data)
        dfs.append( pd.DataFrame(data, columns=cols) )
    return dfs

# %% ../nbs/17rest.ipynb 36
def make_obj_list(dfs, cls_list):
    assert len(dfs)==len(cls_list)
    obj_lists = []
    for df, c in zip(dfs,cls_list):
        obj_list = []
        for row in df.to_dict("records"):
            obj = c(**row)
            obj_list.append(obj)
        obj_lists.append( obj_list[:])
    return obj_lists

# %% ../nbs/17rest.ipynb 43
def valid_test(Cls: BaseModel, df: pd.DataFrame ):
    df = df.where(df.notna(), None) #np.nanをNoneに変換
    try:
        model = Cls(**{"field_list":df.to_dict("records")})
    except ValidationError as e:
        row_, col_, msg_ =[],[],[]
        for i in json.loads(e.json()):
            row_.append(i["loc"][1])
            col_.append(i["loc"][2])
            msg_.append(i["msg"])
        return pd.DataFrame({"row": row_, "col":col_, "message": msg_})
    return None

# %% ../nbs/17rest.ipynb 47
def test_all(df_list, cls_list, name_list):
    error_df    = []
    error_sheet = []
    for d,c,n in zip(df_list, cls_list,name_list):
        ret = valid_test(c, d)
        if ret is not None:
            error_sheet.append(f"### Error in {n} Data")
            error_df.append( ret )
    return error_sheet, error_df 

# %% ../nbs/17rest.ipynb 51
def solve_weiszfeld(model, X0=None, Y0=None):
    """
    モデルをもとにWeiszfeld法を適用し，結果の辞書を返す関数
    """
    cust_df = pd.DataFrame(jsonable_encoder(model.customers))
    weight = list(cust_df.weight)
    #計算時間を測る
    t1 = time.time()
    
    #初期解を渡すように変更
    X, Y, partition, cost = lnd.weiszfeld_numpy(cust_df, weight, model.num_facilities, model.epsilon, model.max_iter, model.seed, X0=None, Y0=None)
    t2=time.time()

    return {"X":list(X), "Y":list(Y), "partition": partition, "cost":cost, "cpu": t2-t1}

# %% ../nbs/17rest.ipynb 58
class InstancePool(PickledBaseModel):
    name : Optional[str] = Field(description="名称")
    instance_list: Optional[List[Instance]] = []
    instance_dic : Optional[Dict[str, Instance]] ={}
    def add(self, instance: Instance):
        self.instance_list.append( instance )
        self.instance_dic[ str(instance.name) ] = instance

class SolutionPool(PickledBaseModel):
    name : Optional[str] = Field(description="名称")
    solution_list: Optional[List[Solution]] = []
    solution_dic : Optional[Dict[str, Solution]] ={}
    def add(self, instance: Instance):
        self.solution_list.append( instance )
        self.solution_dic[ str(instance.name) ] = instance

# %% ../nbs/17rest.ipynb 64
class Product(BaseModel):
    name: str = Field(description="名称")
    average_demand: Optional[float] = Field(description="平均需要量")
    weight: Optional[float] = Field(description="重量")
    volume: Optional[float] = Field(description="容量")
    cust_value: Optional[float] = Field(description="顧客における価値")
    dc_value: Optional[float] = Field(description="倉庫における価値")
    plnt_value: Optional[float] = Field(description="工場における価値")
    fixed_cost: Optional[float] = Field(description="工場における段取り費用")
    # OptLot用
    inv_cost: Optional[float] = Field(description="工場における在庫費用")
    safety_inventory: Optional[float] = Field(description="安全在庫量（最終期の目標在庫量）")
    initial_inventory: Optional[float] = Field(description="初期在庫量")
    target_inventory: Optional[float] = Field(description="在庫量上限")
    class Config:
        schema_extra = {
            "example": {
                "name": "いちご大福",
                "average_demand": 200.,
                "weight": 0.2
            }
        }
class ProductList(BaseModel):
    field_list: List[Product]= Field(description="製品リスト", default=[])


class TotalDemand(BaseModel):
    cust: str  = Field(description="顧客名")
    prod: str = Field(description="製品名")
    demand: float  = Field(description="需要量")
    class Config:
        schema_extra = {
            "example": {
                "cust": "響本店",
                "prod": "いちご大福",
                "demand": 20.
            }
        }
        
class Demand(BaseModel):
    date: datetime.date  = Field(desription="日付")
    cust: str  = Field(description="顧客名")
    prod: str = Field(description="製品名")
    demand: float  = Field(description="需要量")
    sales: Optional[float] = Field(description="売上") 
    promo_0: Optional[int] = Field(description="プロモーション0")
    promo_1: Optional[int] = Field(description="プロモーション1")
        
    class Config:
        schema_extra = {
            "example": {
                "cust": "響本店",
                "prod": "いちご大福",
                "demand": 20.
            }
        }
class DemandList(BaseModel):
    field_list: List[Demand]= Field(description="需要リスト", default=[])

class Promotion(BaseModel):
    date: datetime.date   = Field(desription="日付")
    promo_0: Optional[int] = Field(description="プロモーション0")
    promo_1: Optional[int] = Field(description="プロモーション1")
        
class PromotionList(BaseModel):
    field_list: List[Promotion]= Field(description="プロモーションリスト", default=[])
        
class Dc(BaseModel):
    name: str = Field(description="名称")    
    lat: float = Field(description="緯度")
    lon: float = Field(description="経度")
    lb: float = Field(description="下限")
    ub: float = Field(description="上限")
    fc: float = Field(description="固定費用")
    vc: float = Field(description="変動費用")
    class Config:
        schema_extra = {
            "example": {
                "name": "札幌倉庫",
                "lat": 43.06417,
                "lon": 141.34694
            }
        }

class DcList(BaseModel):
    field_list: List[Dc]= Field(description="倉庫リスト", default=[])

        
class Plant(BaseModel):
    name: str = Field(description="名称")    
    lat: float = Field(description="緯度")
    lon: float = Field(description="経度")
    lb: Optional[float] = Field(0., description="下限")
    ub: Optional[float] = Field(description="上限")
    class Config:
        schema_extra = {
            "example": {
                "name": "札幌工場",
                "lat": 43.06417,
                "lon": 141.34694
            }
        }

class PlantList(BaseModel):
    field_list: List[Plant]= Field(description="工場リスト", default=[])

class PlantProduct(BaseModel):
    prod: str = Field(description="製品名")    
    plnt: str = Field(description="工場名")    
    ub: float  = Field(description="上限")
    lead_time: int = Field(description="リード時間")
    class Config:
        schema_extra = {
            "example": {
                "product": "いちご大福",
                "plant": "札幌工場",
                "ub": 100000.,
                "lead_time": 14
            }
        }
        
class PlantProductList(BaseModel):
    field_list: List[PlantProduct]= Field(description="工場・製品リスト", default=[])


class Trans(BaseModel):
    from_node: str = Field(description="発地名")    
    to_node: str = Field(description="着地名")   
    dist: int = Field(description="距離")   
    time: int = Field(description="移動時間")   
    cost: float = Field(description="費用")   
    kind: str = Field(description="種類")   
    class Config:
        schema_extra = {
            "example": {
                "from_node": "札幌工場",
                "to_node": "札幌倉庫",
                "dist": 0,
                "time": 0,
                "cost": 0.,
                "kind": "plnt-dc"
            }
        }

class Melos(BaseModel):
    """
    MELOS モデル
    """
    dc_lb: Optional[int]  = Field(description="倉庫数下限")   
    dc_ub: Optional[int]  = Field(description="倉庫数上限") 
    single_sourcing: bool = Field(description="単一ソースフラグ") 
    max_cpu: int = Field(description="計算時間上限") 
    customers: List[Customer] = Field([], description="顧客リスト") 
    dcs: List[Dc] = Field([], description="倉庫リスト") 
    plants: List[Plant] =  Field([], description="工場リスト") 
    products: List[Product] = Field([], description="製品リスト") 
    plnt_prod: List[PlantProduct] = Field([], description="工場・製品リスト") 
    total_demand: List[TotalDemand] = Field([], description="総需要リスト") 
    trans: List[Trans] = Field([], description="輸送リスト") 

# %% ../nbs/17rest.ipynb 70
def solve_melos(model: Melos):
    """
    MELOSをモデルから解く関数
    """
    cust_df = pd.DataFrame(jsonable_encoder(model.customers))
    prod_df = pd.DataFrame(jsonable_encoder(model.products))
    dc_df = pd.DataFrame(jsonable_encoder(model.dcs))
    plnt_df = pd.DataFrame(jsonable_encoder(model.plants))
    plnt_prod_df = pd.DataFrame(jsonable_encoder(model.plnt_prod))
    total_demand_df = pd.DataFrame(jsonable_encoder(model.total_demand))
    trans_df = pd.DataFrame(jsonable_encoder(model.trans))
    if model.dc_lb is None:
        model.dc_lb = 0
    if model.dc_ub is None:
        model.dc_ub = len(dc_df)
    flow_df, dc_df, cost_df, violation_df, status = lnd.solve_lnd(prod_df, cust_df, dc_df, plnt_df, plnt_prod_df, total_demand_df, 
                               trans_df, dc_num= (model.dc_lb, model.dc_ub) , single_sourcing=model.single_sourcing, max_cpu = model.max_cpu)
    return {"flow_df": flow_df.to_dict("records"), "dc_df": dc_df.to_dict("records"), "cost_df": cost_df.to_dict("records"), "violation_df": violation_df.to_dict("records"), "status": status}

# %% ../nbs/17rest.ipynb 76
class OptSeq(BaseModel):
    """
    OptSeq モデル
    """
    text_model: str = Field(description="OptSeqモデル") 
    best_act: Optional[str] = Field(description="最良解データ") 
    max_cpu: int = Field(1, description="計算時間上限") 
    initial_flag: bool =  Field(False, description="初期解フラグ") 
    seed: int =  Field(1, description="乱数の種") 
    class Config:
        schema_extra = {
            "example": {
                 'text_model': 'activity Act[1] \n mode  duration 13   \nactivity Act[2] \n mode  duration 25   \nactivity Act[3] \n mode  duration 15   \nactivity Act[4] \n mode  duration 27   \nactivity Act[5] \n mode  duration 22   \ntemporal Act[1] Act[3]  type CS delay 0  \ntemporal Act[2] Act[4]  type CS delay 0  \ntemporal Act[2] Act[5]  type CS delay 0  \ntemporal Act[3] Act[4]  type CS delay 0  \nactivity sink duedate 0 \n',
                 'best_act': None,
                 'max_cpu': 1,
                 'initial_flag': False,
                 'seed': 1    
            }
        }     

# %% ../nbs/17rest.ipynb 78
re_dic0 = "\s*{\s*}\s*" #空の辞書  { }  
re_dic1 = "\s*{.*:.*}\s*" #辞書
re_dic = f"({re_dic0})|({re_dic1})"

class Activity(BaseModel):
    name: str                             = Field( description="作業の名称" )
    duedate: Union[str,int]               = Field( description="納期（整数か'Infinity')" )
    backward: bool                        = Field( description="後ろ詰めのときTrue" )
    weight: int                           = Field( description="納期遅れペナルティ（重み）" )
    autoselect: bool                      = Field( description="モードを自動的に選択するときTrue" )

class ActivityList(BaseModel):
    field_list: List[Activity]= Field(description="作業リスト", default=[])

class Mode(BaseModel):
    name: str                             = Field( description="モードの名称" )
    duration: int                         = Field( description="作業時間" )
    breakable: constr(regex=re_dic)      = Field( description="分割指定" )
    parallel: constr(regex=re_dic)      = Field( description="並列実行指定" )
    state:  constr(regex=re_dic) = Field( description="状態推移" )

class ModeList(BaseModel):
    field_list: List[Mode]= Field(description="モードリスト", default=[])
        
class Resource(BaseModel):
    name: str                                    = Field( description="資源の名称" )
    capacity: Union[int,constr(regex=re_dic)]    = Field( description="容量" )

class ResourceList(BaseModel):
    field_list: List[Resource]= Field(description="資源リスト", default=[])
        
class ActivityMode(BaseModel):
    activity: str      = Field( description="作業の名称" )
    mode: str          = Field( description="モードの名称" )

class ActivityModeList(BaseModel):
    field_list: List[ActivityMode]= Field(description="作業・モードリスト", default=[])
        
class ModeResource(BaseModel):
    mode: str           = Field( description="モードの名称" )
    resource: str       = Field( description="資源の名称" )
    type: Optional[str] = Field( description="資源タイプ" )
    requirement: Union[constr(regex=re_dic),int]  = Field( description="必要量" )
                
class ModeResourceList(BaseModel):
    field_list: List[ModeResource]= Field(description="モード・資源リスト", default=[])
        
class Temporary(BaseModel):
    pred: str       = Field( description="先行作業" )
    succ: str       = Field( description="後続作業" )
    type: str       = Field( description="時間制約タイプ" )
    delay: int      = Field( description="遅れ" )
                
class TemporaryList(BaseModel):
    field_list: List[Temporary]= Field(description="時間制約リスト", default=[])
        
class Nonrenewable(BaseModel):
    name: str       = Field( description="再生不能資源の名称" )
    rhs:  int       = Field( description="右辺定数" )
    direction: str  = Field( description="制約の方向" )
    weight: Union[str,int] = Field( description="制約逸脱ペナルティ" )
                
class NonrenewableList(BaseModel):
    field_list: List[Nonrenewable]= Field(description="再生不能資源リスト", default=[])
        
class LeftHandSide(BaseModel):
    res_name: str       = Field( description="再生不能資源の名称" )
    term:  int          = Field( description="係数" )
    act_name: str       = Field( description="作業の名称" )
    mode_name: str      = Field( description="モードの名称" )
                
class LeftHandSideList(BaseModel):
    field_list: List[LeftHandSide]= Field(description="左辺定数リスト", default=[])
        
class State(BaseModel):
    state_name: str            = Field( description="状態の名称" )
    time_value: constr(regex=re_dic)     = Field( description="状態の変化" )
                
class StateList(BaseModel):
    field_list: List[State]= Field(description="状態リスト", default=[])

# %% ../nbs/17rest.ipynb 84
def solve_optseq(model):
    """
    以下をローカルのソルバーと置き換える．すべて実行環境はlinuxとする．
    """
    f = model.text_model
    f2 = open("optseq_inpost.txt", "w")
    f2.write(f)
    f2.close()
    
    if model.best_act is not None:
        f2 = open("optseq_inpost.txt", "w")
        f2.write( model.best_act )
        f2.close()
    
    if platform.system() == "Windows":
        cmd = "optseq "
    elif platform.system() == "Darwin":
        cmd = "./optseq-mac "
    elif platform.system() == "Linux":
        cmd = "./optseq-linux "
    else:
        print(platform.system(), "may not be supported.")
    cmd +=  "-time "+str(model.max_cpu) + " -seed      "+str(model.seed) 

    if model.initial_flag:
        cmd += " -initial optseq_best_act_data.txt"
    # print ("cmd=",cmd)
    try:
        if platform.system() == "Windows":
            pipe = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        else:
            pipe = subprocess.Popen(cmd, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        print("\n ================ Now solving the problem ================ \n")
    except OSError:
        Status = 7  # ソルバーなし
        err  = "no solver"
    try:
        out, err = pipe.communicate(f.encode())  # get the result
        Status =1    
    except:
        Status = -1 #失敗
        err = "optimized failed"
        
    if Status != -1 or Status != 7:

        out = str(out, encoding='utf-8')
        if err!=None:
            err = str(err, encoding='utf-8')
    else:
        out = ""
    #print(out)
    return {"status": Status, "outpost": out, "error": err}

# %% ../nbs/17rest.ipynb 91
class Scop(BaseModel):
    """
    SCOP モデル
    """
    text_model: str = Field(description="SCOPモデル") 
    best_sol: Optional[str] = Field(description="最良解データ") 
    max_cpu: int = Field(1, description="計算時間上限") 
    initial_flag: bool =  Field(False, description="初期解フラグ") 
    seed: int =  Field(1, description="乱数の種") 
    target: int = Field(0, description="目標目的関数値") 
    class Config:
        schema_extra = {
            "example": {
                 'text_model': 'variable A in { 0,1,2 } \n variable B in { 0,1,2 } \n variable C in { 0,1,2 } \n target = 0 \n AD: weight= inf type=alldiff  C A B ; \n linear_constraint: weight= 1 type=linear 15(A,0) 20(A,1) 30(A,2) 7(B,0) 15(B,1) 12(B,2) 25(C,0) 10(C,1) 13(C,2) <=0\n',
                 'best_sol': None,
                 'max_cpu': 1,
                 'initial_flag': False,
                 'seed': 1,
                 'target': 0
            }
        }

# %% ../nbs/17rest.ipynb 93
def solve_scop(model):
    """
    以下をローカルのソルバーと置き換える．すべて実行環境はlinuxとする．
    """
    f = model.text_model

    f3 = open("scop_inpost.txt","w")
    f3.write(f)
    f3.close()
    
    seed = model.seed
    if platform.system() == "Windows":
        cmd = "scop "
    elif platform.system()== "Darwin":
        cmd = "./scop "
    elif platform.system() == "Linux":
        cmd = "./scop-linux"

    cmd +=  "-time "+str(model.max_cpu) + " -seed      "+str(model.seed) 

    if model.initial_flag:
        cmd += " -initsolfile scop_best_data.txt"

    try:
        if platform.system() == "Windows": #Winの場合にはコマンドをsplit!
            pipe = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stdin=subprocess.PIPE, shell=True)
        else:
            pipe = subprocess.Popen(cmd, stdout=subprocess.PIPE, stdin=subprocess.PIPE, shell=True)
        print("\n ================ Now solving the problem ================ \n")
        #pipe = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE,stdin=subprocess.PIPE)
    except OSError:
        pass
    

    out, err = pipe.communicate(f.encode()) #get the result
    if err!=None:
        err = str(err, encoding='utf-8')
    out = str(out, encoding='utf-8')
    
    Status = pipe.returncode
        
    return {"status": Status, "outpost": out, "error": err}
 

# %% ../nbs/17rest.ipynb 100
class Node(BaseModel):
    id: Optional[int]                   = Field( description="通し番号" )
    name: Optional[str]
    location: Union[ None, Json[Tuple[float,float]], 
                 Tuple[float,float] ]   = Field( description="経度・緯度のタプル" )
        
class NodeList(BaseModel):
    field_list: List[Node]= Field(description="点リスト", default=[])

class Break(BaseModel):
    id: Optional[int]                          = Field( description="通し番号" )
    time_windows: Union[ Json[Tuple[int,int]],
                         Tuple[int,int]]       = Field( description="休憩を行う時間枠（開始・終了時刻を表す整数のタプル）" )
    service: int                               = Field( description="休憩時間" )
    description: Optional[str]                 = Field( description="休憩の説明" )
    class Config:
        schema_extra = {
            "example": {
                "id": 0,
                "time_windows": [3600, 7200],
                "service": 100,
                "description": "昼食休憩"
            }
        }
class BreakList(BaseModel):
    field_list: List[Break]= Field(description="休憩リスト", default=[])
        
        
class Vehicle(BaseModel):
    id: Optional[int]                     = Field( description="通し番号" )
    description: Optional[str]            = Field( description="運搬車の説明" )
    name: Optional[str]                   = Field( description="運搬車の名称" )
    start: Union[ None, Json[Tuple[float,float]], Json[tuple], 
                 Tuple[float,float], tuple ]     = Field( description="運搬車の出発地点の経度・緯度のタプル" )
    start_index:  Optional[int]           = Field( description="運搬車の出発地点のインデックス； 移動時間を行列で与えるときに用いる．" )
    end: Union[ None, Json[Tuple[float,float]], Json[tuple], 
                 Tuple[float,float], tuple ]    = Field( description="運搬車の到着地点の経度・緯度のタプル" )
    end_index: Optional[int]              = Field( description="運搬車の到着地点のインデックス； 移動時間を行列で与えるときに用いる．" )
    capacity: Union[ Json[List[int]],
                    List[int]]            = Field( description="運搬車の容量を表す整数のリスト" )
    time_window: Union[ Json[Tuple[int,int]],
                       Tuple[int,int] ] = Field( description="運搬車の開始・終了時刻を表す整数のタプル" )
    skills: Union[ Json[List[int]],
                    List[int]]             = Field( description="運搬車のスキルを表す整数のリスト" )
    breaks: Union[ Json[List[int]],
                        List[Break]  ]    = Field( description="運搬車の休憩時間を表す休憩時間のリスト" )
    class Config:
        schema_extra = {
            "example": {
                "id": 0,
                "desription": "10トントラック",
                "start":  (43.06417, 141.34694),
                "end":    (42.06417, 140.34694),
                "capacity": [10000],
                "time_window": [ [0, 30000] ],
                "skills": [0,1,3],
                "breaks": [
                    {
                        "id": 0,
                        "time_windows": [ [3600, 7200] ],
                        "service": 100,
                        "description": "昼食休憩"
                    }
                ]
            }
        }
class VehicleList(BaseModel):
    field_list: List[Vehicle]= Field(description="運搬車リスト", default=[])

class Job(BaseModel):
    id:Optional[int]                        = Field( description="通し番号; an integer used as unique identifier" )
    description: Optional[str]              = Field( description="ジョブの説明; a string describing this job" )
    location: Union[ None, Json[Tuple[float,float]], 
                 Tuple[float,float] ]      = Field( description="経度・緯度; coordinates array" )
    location_index: Optional[int]           = Field( description="移動時間行列のインデックス; index of relevant row and column in custom matrix" )
    setup:  Optional[int] = 0
    service: int                            = Field( description ="作業時間; job service duration (defaults to 0)" ) 
    delivery: Union[ Json[List[int]],
                    List[int]]                       = Field( description="配達量の多次元配列（整数のリスト）; an array of integers describing multidimensional quantities for delivery" )
    pickup: Union[ Json[List[int]],
                    List[int]]                        = Field( description="集荷量の多次元配列（整数のリスト）; an array of integers describing multidimensional quantities for pickup" )
    skills: Union[ Json[List[int]],
                    List[int]]                        = Field( description="必要スキルを表す整数のリスト; an array of integers defining mandatory skills" )
    priority: int                           = Field( description="優先度を表す0以上100以下の整数; an integer in the [0, 100] range describing priority level (defaults to 0)" )
    time_windows: Union[ Json[ List[Tuple[int,int]]],
                             List[Tuple[int,int] ] ]    = Field( description="時間枠を表すタプルのリスト; an array of time_window objects describing valid slots for job service start") 
    class Config:
        schema_extra = {
            "example": {
                'id': 0,
                 'description': '合同会社藤本建設',
                 'location': [137.93741356, 35.72581477],
                 'location_index': 0,
                 'service': 1103,
                 'delivery': [137],
                 'pickup': [70],
                 'skills': [0],
                 'priority': 41,
                 'time_windows': [[542, 32942]]
            }
        }
class JobList(BaseModel):
    field_list: List[Job]= Field(description="ジョブリスト", default=[])
              
class ShipmentStep(BaseModel):
    id: Optional[int]                       = Field( description="通し番号; an integer used as unique identifier" )
    description: Optional[str]              = Field( description="積み込み（積み降ろし）地点; a string describing this job" )
    location: Union[ None, Json[Tuple[float,float]], 
                 Tuple[float,float] ]  = Field( description= "経度・緯度; coordinates array" )
    location_index: Optional[int]           = Field( description="移動時間行列のインデックス; index of relevant row and column in custom matrix" )
    setup: Optional[int] = 0
    service: int                            = Field( description="作業時間; job service duration (defaults to 0)" ) 
    time_windows: Union[ Json[ List[Tuple[int,int]]],
                             List[Tuple[int,int] ] ]       = Field( description="時間枠を表すタプルのリスト; an array of time_window objects describing valid slots for job service start") 
    class Config:
        schema_extra = {
            "example": {
                  'id': 0,
                  'description': "積み込み",
                  'location': [139.5292597, 36.23242288],
                  'location_index': 5,
                  'service': 744,
                  'time_windows': [[914, 33314]]
            }
        }
        
class Shipment(BaseModel):
    #
    pickup: Optional[ShipmentStep]       = Field( description="積み込み地点情報; a shipment_step object describing pickup" )
    delivery: Optional[ShipmentStep]     = Field(description= "積み降ろし地点情報; a shipment_step object describing delivery" )
    #データフレーム検証用    
    pickup_point: str                    = Field( description="積み込み地点名称; a shipment_step object describing pickup" )
    pickup_service: int
    pickup_time_windows: Union[ Json[ List[Tuple[int,int]]],
                             List[Tuple[int,int] ] ]  
    pickup_location: Union[ None, Json[Tuple[float,float]], 
                 Tuple[float,float] ]
    pickup_index: Optional[int]
    delivery_point: str                  = Field( description= "積み降ろし地点名称; a shipment_step object describing delivery" )
    delivery_service: int
    delivery_time_windows: Union[ Json[ List[Tuple[int,int]]],
                             List[Tuple[int,int] ] ]  
    delivery_location: Union[ None, Json[Tuple[float,float]], 
                       Tuple[float,float] ]
    delivery_index: Optional[int]
        
    amount: Union[ Json[List[int]],
                    List[int]]                    = Field( description="量を表す多次元配列（整数のリスト）; an array of integers describing multidimensional quantities ")   
    skills: Union[ Json[List[int]],
                    List[int]]                     = Field( description="必要スキルを表す整数のリスト; an array of integers defining mandatory skills" )
    priority: int                        = Field( description="優先度を表す0以上100以下の整数; an integer in the [0, 100] range describing priority level (defaults to 0)" )
    class Config:
        schema_extra = {
            "example": {
                  'pickup': 
                     {'id': 5,
                      'description': "積み込み",
                      'location': [139.5292597, 36.23242288],
                      'location_index': 5,
                      'service': 744,
                      'time_windows': [[914, 33314]]},
                 'delivery': 
                     {'id': 10,
                      'description': "積み降ろし",
                      'location': [139.28101286, 36.322793299999994],
                      'location_index': 10,
                      'service': 881,
                      'time_windows': [[2268, 34668]]},
                 'amount': [38],
                 'skills': [0],
                 'priority': 87
            }
        }
        
class ShipmentList(BaseModel):
    field_list: List[Shipment]= Field(description="積み込み・積み降ろしリスト", default=[])
        
class Metro(BaseModel):
    vehicles: List[Vehicle]               = Field(description="運搬車リスト")    
    jobs: Optional[ List[Job] ]           = Field(description="仕事リスト")
    shipments: Optional[ List[Shipment] ] = Field(description="積み込み・積み降ろしリスト")
    breaks: Optional[List[Break]]         = Field([],description="休憩リスト")
    matrix: Optional[ List[List[int]] ]   = Field([],description="移動時間行列")

# %% ../nbs/17rest.ipynb 109
def solve_metro(model, matrix=False, threads = 4, explore = 1):
    #print(model)
    #model is mapped to Metro instance; needs to encode
    model_dict = jsonable_encoder(model)
    print(model_dict)
    with open('test1.json', 'w') as f:
        json.dump(model_dict, f, indent=4)
    print("solve")
    if platform.system() == "Windows":
        if matrix:
            cmd = "vroom-win -i test1.json -o outpost1.json"
        else:
            cmd = "vroom-win - g -i test1.json -o outpost1.json"
    elif platform.system() == "Darwin":
        if matrix:
            cmd = "vroom -i test1.json -o outpost1.json"
        else:
            cmd = "vroom -g -i test1.json -o outpost1.json"
    elif platform.system() == "Linux":
        if matrix:
            cmd = "./vroom-linux -i test1.json -o outpost1.json"
        else:
           # cmd = "./vroom-linux  -g -i test1.json -o outpost1.json"  OSRMに接続エラーする！
            cmd = "./vroom-linux -i test1.json -o outpost1.json"
    else:
        print(platform.system(), "may not be supported.")
        return -1

    cmd +=  " -t " + str(threads) + " -x " + str(explore)
    # -g,                              add detailed route geometry and indicators
    # -t THREADS (=4),                 number of threads to use
    # -x EXPLORE (=5),                 exploration level to use (0..5)

    try:
        print("Now solving ...")
        o = subprocess.run(cmd.split(), check=True, capture_outpost=True)
        #print(o.stdout)
        print("Done")
    except subprocess.CalledProcessError as e:
        #print('ERROR:',e.stderr) # ERROR
        return "", "", e.stderr

    example1_in = open('test1.json', 'r')
    inpost_dic = json.load(example1_in)

    example1_out = open('outpost1.json', 'r')
    outpost_dic = json.load(example1_out)

    return inpost_dic, outpost_dic, ""  #errorを返す

# %% ../nbs/17rest.ipynb 115
class Stage(BaseModel):
    name : str                   = Field( description = "在庫地点の名称" )
    net_replenishment_time: int  = Field( description = "正味補充時間" )
    max_guaranteed_LT: int       = Field( description = "最大保証リード時間" )
    processing_time: int         = Field( description = "処理時間" )
    replenishment_LT: int        = Field( description = "補充リード時間" )
    guaranteed_LT: int           = Field( description = "保証リード時間" )
    z: float                     = Field( description = "安全在庫係数" )
    average_demand: float        = Field( description = "平均需要量" )      
    sigma: float                 = Field( description = "需要の標準偏差" )
    h: float                     = Field( description = "在庫費用" )
    b: float                     = Field( description = "バックオーダー費用" )
    x: Optional[float]           = Field( description = "地点のx座標" )
    y: Optional[float]           = Field( description = "地点のy座標" )
    capacity: float              = Field( description = "単位期間の最大処理能力（容量）" )

    class Config:
        schema_extra = {
            "example": {
                 'name': 'Dist_0001',
                 'net_replenishment_time': 0,
                 'max_guaranteed_LT': 0,
                 'processing_time': 1,
                 'replenishment_LT': 0,
                 'guaranteed_LT': 0,
                 'z': 1.6448536269514722,
                 'average_demand': 70.0,
                 'sigma': 35.0,
                 'h': 2750.0,
                 'b': 23913.9,
                 'x': 384.0,
                 'y': 272.0,
                 'capacity': 700.0
            }
        }
class StageList(BaseModel):
    field_list: List[Stage]= Field(description="在庫地点リスト", default=[])        

        
class Bom(BaseModel):
    child: str                  = Field( description = "子製品（枝の発地点）" )
    parent: str                 = Field( description = "親製品（枝の着地点）" )
    units: float                = Field( description = "親製品を1単位作るのに必要な子製品の数" )
    allocation: Optional[float] = Field( description = "品切れのときの割当量" )
    class Config:
        schema_extra = {
            "example": {
                'child': 'Manuf_0001',
                 'parent': 'Trans_0001',
                 'units': 1.0,
                 'allocation': 1.0
            }
        }
class BomList(BaseModel):
    field_list: List[Bom]= Field(description="枝情報リスト", default=[])
        
class Messa(BaseModel):
    stages: List[Stage]     = Field( description = "在庫地点データのリスト" )
    boms: List[Bom]         = Field( description = "枝情報のリスト" )

# %% ../nbs/17rest.ipynb 119
def solve_messa(model: Messa):
    """
    SSAをモデルから解く関数
    """
    stage_df = pd.DataFrame(jsonable_encoder(model.stages))
    bom_df = pd.DataFrame(jsonable_encoder(model.boms))
    best_cost, stage_df, bom_df, fig = optinv.solve_SSA(stage_df, bom_df)
    return {"best_cost": best_cost, "stage_df": stage_df.to_dict("records"), "bom_df": bom_df.to_dict("records")}

# %% ../nbs/17rest.ipynb 124
def solve_optinv(model: Messa):
    """
    periodic_inv_optをモデルから解く関数
    """
    stage_df = pd.DataFrame(jsonable_encoder(model.stages))
    bom_df = pd.DataFrame(jsonable_encoder(model.boms))
    cost, stage_df, I = optinv.periodic_inv_opt(stage_df, bom_df, max_iter = 10, n_samples = 10, n_periods = 100, seed = 1)
    return {"best_cost": cost, "stage_df": stage_df.to_dict("records")} # "inventory": list(I)} 

# %% ../nbs/17rest.ipynb 129
class Sendo(BaseModel):
    cost_per_dis: float     = Field(10, description="1km当たりの費用")   
    cost_per_time: float    = Field(5000, description="1時間当たりの費用")   
    capacity: int           = Field(10000, description="運搬車の容量")   
    max_cpu: int            = Field(60, description="最大計算時間")   
    scaling: bool           = Field(False, description="勾配スケーリング法のときTrue")   
    k: int                  = Field(10, description="1度に追加する最短路の数")   
    alpha: float            = Field(0.5, description="勾配スケーリング法のパラメータ")   
    max_iter: int           = Field(10, description="勾配スケーリング法の最大反復数")   
    osrm: bool              = Field(False, description="地図で道路距離と時間を算出する場合True")   
    dcs:  List[Dc]          = Field(description="倉庫（積替え地点，ベース）のリスト")   #倉庫はMELOSで定義済み 
    demand: List[ List[float] ] = Field( description = "需要量（倉庫数の次元のリストのリスト）" )

# %% ../nbs/17rest.ipynb 134
def solve_sendo(model: Sendo):
    """
    Solve SENDO using Sendo model
    """
    dc_df = pd.DataFrame(jsonable_encoder(model.dcs))
    od_df = pd.DataFrame(np.array(model.demand))

    path_df, vehicle_df, cost_df, fig = snd.solve_sndp(dc_df, od_df, 
                                                       cost_per_dis = model.cost_per_dis, cost_per_time = model.cost_per_time, 
                                                       capacity = model.capacity, max_cpu = model.max_cpu, scaling = model.scaling, 
                                                       k = model.k, alpha = model.alpha, max_iter = model.max_iter, osrm = model.osrm)
    return {"path_df":path_df.to_dict("records"), "vehicle_df":vehicle_df.to_dict("records"), "cost_df":cost_df.to_dict("records"), "fig":plotly.io.to_json(fig)}

# %% ../nbs/17rest.ipynb 142
class Period(BaseModel):
    id : int         = Field( description="期のインデックス" )
    description: str = Field( description="期の説明" )
    class Config:
        schema_extra = {
            "example": {
                  'id': 0, 
                  'description': '9:00'
            }
        }
class PeriodList(BaseModel):
    field_list: List[Period]= Field(description="期リスト", default=[])    

class ShiftBreak(BaseModel):
    period : int     = Field( description="連続稼働期数" )
    break_time: int  = Field( description="休憩期間数" )
    class Config:
        schema_extra = {
            "example": {
                  'period': 3,
                  'break_time': 0
            }
        }
class ShiftBreakList(BaseModel):
    field_list: List[ShiftBreak]= Field(description="休憩リスト", default=[])   
        
        
class Day(BaseModel):
    id : int           = Field( description="日のインデックス" )
    day: datetime.date = Field( description="日付" ) #datetime?
    day_of_week: str   = Field( description="曜日名" )
    day_type: str      = Field( description="日の種類" )
    class Config:
        schema_extra = {
            "example": {
                  'id': 0, 
                  'day': '2020-05-01', 
                  'day_of_week': 'Fri',
                  'day_type': 'weekday'
            }
        }
class DayList(BaseModel):
    field_list: List[Day]= Field(description="日リスト", default=[])  
        
class ShiftJob(BaseModel):
    id : int         = Field( "ジョブのインデックス（休憩は必ず0）" )
    description: str = Field( "ジョブの説明" )
    class Config:
        schema_extra = {
            "example": {
                  'id': 1, 
                  'description': 'レジ打ち'
            }
        }
class ShiftJobList(BaseModel):
    field_list: List[ShiftJob]= Field(description="ジョブリスト", default=[])  
    
class Staff(BaseModel):
    name: str             = Field( description="スタッフの名称" )
    wage_per_period: int  = Field( description="1期あたりの給料" )
    max_period: int       = Field( description="1日あたりの最大期間" )
    max_day: int          = Field( description="最大出勤日数" )
    job_set: str          = Field( description="割当可能なジョブの集合（インデックスのリストを文字列にしたもの）" )     #文字列だが本来はList[int] 
    day_off: str          = Field( description="休みを希望する日の集合（インデックスのリストを文字列にしたもの）" )     #文字列だが本来はList[int] 
    class Config:
        schema_extra = {
            "example": {
                 'name': '高橋 翼',
                 'wage_per_period': 1264,
                 'max_period': 12,
                 'max_day': 12,
                 'job_set': '[1]',
                 'day_off': '[8, 12, 2]'
            }
        }
class StaffList(BaseModel):
    field_list: List[Staff]= Field(description="スタッフリスト", default=[])  

class Requirement(BaseModel):
    day_type: str     = Field( description="日の種類" )
    job: int          = Field( description="ジョブのインデックス" )
    period: int       = Field( description="期のインデックス" )
    requirement: int  = Field( description="必要人数" )
    class Config:
        schema_extra = {
            "example": {
                  'day_type': 'weekday',
                  'job': 1, 
                  'period': 1,
                  'requirement': 1
            }
        }
class RequirementList(BaseModel):
    field_list: List[Requirement]= Field(description="必要人数リスト", default=[])  
        
        
class Parameter(BaseModel):
    theta: Optional[int]              = Field(1, description="開始直後（もしくは終了直前）に休憩を禁止する期間数")
    lb_penalty :Optional[int]         = Field(10000, description="必要人数を下回った場合のペナルティ") 
    job_change_penalty: Optional[int] = Field(10, description="ジョブを切り替えたときのペナルティ") 
    break_penalty : Optional[int]     = Field(10000, description="開始直後・終了直前の休憩を逸脱したときのペナルティ") 
    max_day_penalty :Optional[int]    = Field(5000, description="最大稼働日数を超過したときのペナルティ")
    time_limit : Optional[int]        = Field(10, description="計算時間上限") 
    random_seed : Optional[int]       = Field(1, description="乱数の種")
    class Config:
        schema_extra = {
            "example": {
                 'theta': 1,
                 'lb_penalty': 10000,
                 'job_change_penalty': 10,
                 'break_penalty': 10000,
                 'max_day_penalty': 5000,
                 'time_limit': 1,
                 'random_seed': 2
            }
        }

class OptShift(BaseModel):
    periods: List[Period]             = Field( description="期データのリスト" )
    breaks: List[ShiftBreak]          = Field( description="休憩条件のリスト" )
    days: List[Day]                   = Field( description="日データのリスト" )
    jobs: List[ShiftJob]              = Field( description="ジョブのリスト" )
    staffs: List[Staff]               = Field( description="スタッフのリスト" )
    requirements: List[Requirement]   = Field( description="必要量データのリスト" )
    parameters: Parameter             = Field( description="パラメータのリスト" )

# %% ../nbs/17rest.ipynb 147
def solve_optshift(model):
    """
    Solve OPTSHIFT using OptShift model
    """
    period_df = pd.DataFrame(jsonable_encoder(model.periods))
    break_df = pd.DataFrame(jsonable_encoder(model.breaks))
    day_df = pd.DataFrame(jsonable_encoder(model.days))
    job_df = pd.DataFrame(jsonable_encoder(model.jobs))
    staff_df = pd.DataFrame(jsonable_encoder(model.staffs))
    requirement_df = pd.DataFrame(jsonable_encoder(model.requirements))
    params = jsonable_encoder(model.parameters) #辞書
        
    cost_df, job_assign, status = shift.shift_scheduling(period_df, break_df, day_df, job_df, staff_df, requirement_df, 
                        params["theta"],
                        params["lb_penalty"], params["job_change_penalty"], params["break_penalty"], params["max_day_penalty"], False,
                        params["time_limit"], params["random_seed"])
      
    return {"cost_df": cost_df.to_dict("records"), "job_assign":job_assign, "status": status}

# %% ../nbs/17rest.ipynb 153
#ProductはMELOSと共用
#原材料の在庫費用，初期在庫，最終在庫を定義する！

#BomはMessaと共用

class Production(BaseModel):
    name: str       = Field( description="製品の名称" )
    ProdTime: float   = Field( description="生産時間" )
    SetupTime: float   = Field( description="段取り時間" )    
    ProdCost: float   = Field( description="生産費用" )
    SetupCost: float   = Field( description="段取り費用" )
        
class ProductionList(BaseModel):
    field_list: List[Production]= Field(description="生産情報リスト", default=[])
        
        
class PlantDemand(BaseModel):
    prod: str    = Field( description="製品の名称" )
    period: int  = Field( description="期" )
    demand: float = Field( description="需要量")

class PlantDemandList(BaseModel):
    field_list: List[PlantDemand]= Field(description="工場における需要リスト", default=[])
        
class LotResource(BaseModel):
    name: str       = Field( description="資源の名称" )
    period: int     = Field( description="期" )
    capacity: float = Field( description="生産時間上限")
        
class LotResourceList(BaseModel):
    field_list: List[LotResource]= Field(description="資源リスト", default=[])
